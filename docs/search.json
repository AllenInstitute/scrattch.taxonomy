[{"path":"/Taxonomy_list.html","id":null,"dir":"","previous_headings":"","what":"Allen Institute Taxonomy overview","title":"Allen Institute Taxonomy overview","text":"provide initial portal accessing single-cell RNAseq taxonomies Allen Institute publications. Data can download using following aws s3 command line call: aws s3 cp \"S3-URI\" .","code":""},{"path":"/Taxonomy_list.html","id":"biccn-m1-zemke-et-al-2023","dir":"","previous_headings":"","what":"BICCN M1 Zemke et al. 2023","title":"Allen Institute Taxonomy overview","text":"Zemke et al. 2023 providing taxonomy motor cortex per species.","code":""},{"path":"/Taxonomy_list.html","id":"cross-areal-jorstad-et-al-2023","dir":"","previous_headings":"","what":"Cross Areal Jorstad et al. 2023","title":"Allen Institute Taxonomy overview","text":"Cross Areal study Jorstad et al. 2023 providing taxonomy per cortical region.","code":""},{"path":"/Taxonomy_list.html","id":"great-apes-jorstad-et-al-2023","dir":"","previous_headings":"","what":"Great Apes Jorstad et al. 2023","title":"Allen Institute Taxonomy overview","text":"Great Apes study Jorstad et al. 2023 providing taxonomy per species.","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v12","dir":"","previous_headings":"","what":"scrattch.taxonomy v1.2","title":"NA","text":"Improvements mapping patch-seq schema.","code":""},{"path":"/VERSIONS.html","id":"major-changes","dir":"","previous_headings":"scrattch.taxonomy v1.2","what":"Major changes","title":"NA","text":"Allow direct download loading taxonomies AWS loadTaxonomy Adding html documentation functions Updated example Mouse VISp Correct treatment high variance / marker genes","code":""},{"path":"/VERSIONS.html","id":"minor-changes","dir":"","previous_headings":"scrattch.taxonomy v1.2","what":"Minor changes","title":"NA","text":"Bug fixes Updated documentation Correct setup tree mapping (fixes breaking error) Fix issues createShiny introduced v0.7 Remove extra “.h5ad” added title –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v112","dir":"","previous_headings":"","what":"scrattch.taxonomy v1.1.2","title":"NA","text":"Update allow counts provided cellxgene genexcell.","code":""},{"path":"/VERSIONS.html","id":"major-changes-1","dir":"","previous_headings":"scrattch.taxonomy v1.1.2","what":"Major changes","title":"NA","text":"Creation logCPM_byRows allow counts input cellxgene genexcell avoid multiple large matrix transpositions Update loadTaxonomy auto-calulate normalized counts don’t need saved h5ad files Addition gene.meta.data slot buildTaxonomy gene information Improve treatment dendrograms (precomputed dendrograms ignored non-ideal genes used compute)","code":""},{"path":"/VERSIONS.html","id":"minor-changes-1","dir":"","previous_headings":"scrattch.taxonomy v1.1.2","what":"Minor changes","title":"NA","text":"additional bug fixes v1.1.1 Minor updates MTG example Output additional warnings metadata changed updateTaxonomyMetadata –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v111","dir":"","previous_headings":"","what":"scrattch.taxonomy v1.1.1","title":"NA","text":"Update better integrate Allen Institute schema downstream scrattch.mapping scrattch.patchseq functionality.","code":""},{"path":"/VERSIONS.html","id":"major-changes-2","dir":"","previous_headings":"scrattch.taxonomy v1.1.1","what":"Major changes","title":"NA","text":"Creation buildTaxonomyMode function adding flexible modes/subsets/children (without adding patchseq QC) Update dendrogram MapMyCells handling schema Allow computing binary genes UMAP within buildTaxonomy buildTaxonomyMode Creation new example using buildTaxonomyMode human MTG","code":""},{"path":"/VERSIONS.html","id":"minor-changes-2","dir":"","previous_headings":"scrattch.taxonomy v1.1.1","what":"Minor changes","title":"NA","text":"Bug fixes Speed geneSymbolToEnsembl function Update brain region atlases correct ontology links Update self_reported_ethnicity_ontology_term_id deal “unknown” “multiethnic” entries Minor changes error handling –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v091","dir":"","previous_headings":"","what":"scrattch.taxonomy v0.9.1","title":"NA","text":"Major update integrate new Allen Institute schema","code":""},{"path":"/VERSIONS.html","id":"major-changes-3","dir":"","previous_headings":"scrattch.taxonomy v0.9.1","what":"Major changes","title":"NA","text":"Introduction AIT schema code Many new functions deal schema, ontologies, taxonomy checks, etc. Updated example use new schema Metadata error correction","code":""},{"path":"/VERSIONS.html","id":"minor-changes-3","dir":"","previous_headings":"scrattch.taxonomy v0.9.1","what":"Minor changes","title":"NA","text":"Bug fixes –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v071","dir":"","previous_headings":"","what":"scrattch.taxonomy v0.7.1","title":"NA","text":"Updates improve correlation mapping","code":""},{"path":"/VERSIONS.html","id":"major-changes-4","dir":"","previous_headings":"scrattch.taxonomy v0.7.1","what":"Major changes","title":"NA","text":"New function updateHighlyVariableGenes update genes used mapping","code":""},{"path":"/VERSIONS.html","id":"minor-changes-4","dir":"","previous_headings":"scrattch.taxonomy v0.7.1","what":"Minor changes","title":"NA","text":"Synchronized versions scrattch.taxonomy, scrattch.mapping, scrattch.patchseq Set mode-specific variable genes “standard” Minor (breaking) bug fix AIT.anndata <—> AIT_anndata Updated documentation –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v0514","dir":"","previous_headings":"","what":"scrattch.taxonomy v0.5.14","title":"NA","text":"Upgrades streamline process","code":""},{"path":"/VERSIONS.html","id":"major-changes-5","dir":"","previous_headings":"scrattch.taxonomy v0.5.14","what":"Major changes","title":"NA","text":"Updated example Pull code setting tree hierarchical mapping buildTaxonomy","code":""},{"path":"/VERSIONS.html","id":"minor-changes-5","dir":"","previous_headings":"scrattch.taxonomy v0.5.14","what":"Minor changes","title":"NA","text":"Bug fixes –","code":""},{"path":"/VERSIONS.html","id":"scrattchtaxonomy-v0513","dir":"","previous_headings":"","what":"scrattch.taxonomy v0.5.13","title":"NA","text":"Supporting changes scrattch.mapping updates hierarchical Seurat mapping","code":""},{"path":"/VERSIONS.html","id":"major-changes-6","dir":"","previous_headings":"scrattch.taxonomy v0.5.13","what":"Major changes","title":"NA","text":"Update docker downgrade Seurat SeuratObject packages older versions Building hierarchical mapping statistics can correctly stored multiple modes","code":""},{"path":"/VERSIONS.html","id":"minor-changes-6","dir":"","previous_headings":"scrattch.taxonomy v0.5.13","what":"Minor changes","title":"NA","text":"Bug fix allowing users provide dendrogram –","code":""},{"path":[]},{"path":"/VERSIONS.html","id":"major-changes-7","dir":"","previous_headings":"","what":"Major changes","title":"NA","text":"Inclusion taxonomy schema GitHub page . Removal vignettes integration website examples Inclusion additional functions usability Windows Moved dendrogram Hodge et al new data package (https://github.com/AllenInstitute/hodge2019data)","code":""},{"path":"/VERSIONS.html","id":"minor-updates","dir":"","previous_headings":"","what":"Minor updates","title":"NA","text":"Update examples reflect splitting scrattch.taxonomy scrattch.mapping libraries Small changes typos error correction","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Inkar Kapen. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kapen (2025). scrattch.taxonomy: Generalized Allen Institute taxonomy building.. R package version 1.2, https://alleninstitute.github.io/scrattch.taxonomy/.","code":"@Manual{,   title = {scrattch.taxonomy: Generalized Allen Institute taxonomy building.},   author = {Inkar Kapen},   year = {2025},   note = {R package version 1.2},   url = {https://alleninstitute.github.io/scrattch.taxonomy/}, }"},{"path":"/index.html","id":"scrattchtaxonomy","dir":"","previous_headings":"","what":"Generalized Allen Institute taxonomy building.","title":"Generalized Allen Institute taxonomy building.","text":"Generalized taxonomy building scripts RNA-seq based taxonomies following Allen Institute schema. list available taxonomies format available Taxonomy_list.md. 10 November 2023, represent published single-cell RNAseq taxonomies Allen Institute groups, largely complementary taxonomies included Brain Knowledge Platform, although efforts integrate ongoing.","code":""},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Generalized Allen Institute taxonomy building.","text":"can find detail description scrattch.taxonomy (OUTDATED – FIX) functions : Update notes :","code":""},{"path":[]},{"path":"/index.html","id":"using-docker-recommended","dir":"","previous_headings":"Installation","what":"Using docker (recommended)","title":"Generalized Allen Institute taxonomy building.","text":"setup docker environemnt scrattch.taxonomy, scrattch.mapping, scrattch.patchseq contains required dependencies current version scrattch packages. See readme parent scrattch package --date docker information.","code":""},{"path":"/index.html","id":"directly-from-github-strongly-discouraged","dir":"","previous_headings":"Installation","what":"Directly from GitHub (strongly discouraged)","title":"Generalized Allen Institute taxonomy building.","text":"advise using provided docker, can also install scrattch.taxonomy directly GitHub follows: strategy might work due complicated dependencies. Also note doMC may need installed manually use Windows. Vignettes provided .","code":"devtools::install_github(\"AllenInstitute/scrattch.taxonomy\")"},{"path":"/index.html","id":"usage-examples","dir":"","previous_headings":"","what":"Usage examples","title":"Generalized Allen Institute taxonomy building.","text":"Build Shiny taxonomy example provides basics creating new taxonomy compatible scrattch.mapping mapping functions (internal Allen Institute) MolGen Shiny tools. Check Shiny taxonomy convert AIT example shows can use checkTaxonomy see abide AIT schema, use resulting information convert AIT format. (Note example work Allen Institute employees points private file.) Create human MTG taxonomy AIT format neuron ‘child’ taxonomy example provides step--step process downloading human MTG data adult neurotypical humans along associated SEA-AD taxonomy (), converting AIT file aligns AIT schema, adding child taxonomy subsetting neuronal types use Patch-seq mapping (see scrattch.patchseq library).","code":""},{"path":"/index.html","id":"reporting-issues","dir":"","previous_headings":"","what":"Reporting issues","title":"Generalized Allen Institute taxonomy building.","text":"run issues, please let Nelson Jeremy know create new issue ‘Issues’ tab .","code":""},{"path":"/index.html","id":"todo","dir":"","previous_headings":"","what":"TODO","title":"Generalized Allen Institute taxonomy building.","text":"Update documentation.","code":""},{"path":[]},{"path":"/reference/addDendrogramMarkers.html","id":null,"dir":"Reference","previous_headings":"","what":"Add marker genes to reference dendrogram for tree mapping — addDendrogramMarkers","title":"Add marker genes to reference dendrogram for tree mapping — addDendrogramMarkers","text":"Add marker genes reference dendrogram tree mapping","code":""},{"path":"/reference/addDendrogramMarkers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add marker genes to reference dendrogram for tree mapping — addDendrogramMarkers","text":"","code":"addDendrogramMarkers(   AIT.anndata,   mode.name = NULL,   mode = AIT.anndata$uns$mode,   celltypeColumn = NULL,   subsample = 100,   num.markers = 20,   de.param = scrattch.hicat::de_param(low.th = 0.1, padj.th = 1, lfc.th = 0.01, q1.th =     0.1, q2.th = NULL, q.diff.th = 0.1, de.score.th = 1, min.cells = 1, min.genes = 1),   calculate.de.genes = TRUE,   save.shiny.output = TRUE,   mc.cores = 1,   bs.num = 100,   p = 0.8,   low.th = 0.1,   overwriteMarkers = TRUE,   taxonomyDir = file.path(AIT.anndata$uns$taxonomyDir),   ... )"},{"path":"/reference/addDendrogramMarkers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add marker genes to reference dendrogram for tree mapping — addDendrogramMarkers","text":"AIT.anndata reference taxonomy anndata object. mode.name Taxonomy mode determine version filtering use. celltypeColumn Column name correspond cell type names dendrogram. least two cells per cell type dendrogram must included. Default take highest resolution level hierarchy subsample number cells retain per cluster (default = 100) num.markers maximum number markers calculate per pairwise differential calculation per direction (default = 20) de.param Differential expression (DE) parameters genes clusters used define marker genes.  default values set 10x nuclei defaults scrattch.hicat, except min.cells=2 (see notes ). calculate.de.genes Default=TRUE. set false, function search \"de_genes\" file called \"de_genes_mode.RData\" folder taxonomyDir, use available. save.shiny.output standard output files generated saved AIT file (default=TRUE).  required tree mapping, required building patch-seq shiny instance. See notes. mc.cores Number cores use running function speed things .  Default = 1.  Values>1 supported UNIX environment require foreach doParallel R libraries. bs.num Number bootstrap runs creating dendrogram (default 100) p proportion marker genes include iteration mapping algorithm. low.th minimum difference Pearson correlation required decide branch overwriteMarkers markers already calculated tree, overwritten (default = TRUE) taxonomyDir location create directory taxonomy information. taxonomy de.genes_mode.name.RData get saved . default loose parameters set de_param effort get extra marker genes node.  defaults previously proposed 10x nuclei following de_param(low.th = 1, padj.th = 0.01, lfc.th = 1, q1.th = 0.3, q2.th = NULL, q.diff.th = 0.7, de.score.th = 100, min.cells = 2, min.genes = 5). See function de_param scrattch.hicat details. save.shiny.output=TRUE, following two values get saved uns: memb.ref   - matrix indicating much confusion mapping cell nodes tree (including cell types) comparing clustering mapping results various subsamplings data map.df.ref - Result tree mapping cell reference clustering tree, including various statistics marker gene evidence.  output comes tree mapping.","code":""},{"path":"/reference/addDendrogramMarkers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add marker genes to reference dendrogram for tree mapping — addDendrogramMarkers","text":"updated dendrogram variable dend except marker genes added node.","code":""},{"path":"/reference/addMapMyCells.html","id":null,"dir":"Reference","previous_headings":"","what":"This function builds files needed for hierarchical mapping and stores them in the uns$hierarchical of AIT (Shiny) taxonomy. — addMapMyCells","title":"This function builds files needed for hierarchical mapping and stores them in the uns$hierarchical of AIT (Shiny) taxonomy. — addMapMyCells","text":"hierarchical mapping wrapper around cell_type_mapper call's functions generate needed files needed mapping.","code":""},{"path":"/reference/addMapMyCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function builds files needed for hierarchical mapping and stores them in the uns$hierarchical of AIT (Shiny) taxonomy. — addMapMyCells","text":"","code":"addMapMyCells(   AIT_anndata,   hierarchy = AIT_anndata$uns$hierarchy,   anndata_path = NULL,   force = FALSE,   n_processors = 3,   normalization = \"log2CPM\",   tmp_dir = NULL,   user_precomp_stats_path = NULL,   user_query_markers_path = NULL )"},{"path":"/reference/addMapMyCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function builds files needed for hierarchical mapping and stores them in the uns$hierarchical of AIT (Shiny) taxonomy. — addMapMyCells","text":"AIT_anndata reference taxonomy anndata object. hierarchy Named list term_set_labels reference taxonomy ordered gross fine. default list included AIT_anndata, . E.g. \"Class\" = 0, \"Subclass\"=  1 anndata_path Local file path AIT reference taxonomy (h5ad file). force Boolean value indicating whether overwrite AIT reference taxonomy's hierarchical file given mode. n_processors Number independent worker processes spin . normalization Normalization h5ad files; must either 'raw' 'log2CPM'. tmp_dir Temporary directory writing hierarchical files. user_precomp_stats_path Alternative path user provided precompute stats HDF5 file. generated, provided. user_query_markers_path Alternative path user provided query markers JSON file. generated, provided.","code":""},{"path":"/reference/addMapMyCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function builds files needed for hierarchical mapping and stores them in the uns$hierarchical of AIT (Shiny) taxonomy. — addMapMyCells","text":"AIT_anndata, reference taxonomy hierarchical files, precomputed stats query markers saved uns.","code":""},{"path":"/reference/annotate_cat.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate colors and ids for categorical annotations — annotate_cat","title":"Generate colors and ids for categorical annotations — annotate_cat","text":"Generate colors ids categorical annotations","code":""},{"path":"/reference/annotate_cat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate colors and ids for categorical annotations — annotate_cat","text":"","code":"annotate_cat(   df,   col = NULL,   base = NULL,   sort_label = T,   na_val = \"ZZ_Missing\",   colorset = \"varibow\",   color_order = \"sort\" )"},{"path":"/reference/annotate_cat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate colors and ids for categorical annotations — annotate_cat","text":"df data frame annotate col name character column annotate base base name annotation, wil used desc table. provided, use col base. sort_label logical value determine data col arranged alphanumerically ids assigned. default = T. na_val value use replace NAs. default = \"ZZ_Missing\". colorset colorset use assigning category colors. Options \"rainbow\",\"viridis\",\"inferno\",\"magma\", \"terrain\" color_order order colors assigned. Options \"sort\" \"random\". \"sort\" assigns colors order; \"random\" randomly assign colors.","code":""},{"path":"/reference/annotate_cat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate colors and ids for categorical annotations — annotate_cat","text":"modified data frame: annotated column renamed base_label, base_id base_color columns appended","code":""},{"path":"/reference/annotate_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate colors and ids for categorical annotations that are factors — annotate_factor","title":"Generate colors and ids for categorical annotations that are factors — annotate_factor","text":"Generate colors ids categorical annotations factors","code":""},{"path":"/reference/annotate_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate colors and ids for categorical annotations that are factors — annotate_factor","text":"","code":"annotate_factor(   df,   col = NULL,   base = NULL,   na_val = \"ZZ_Missing\",   colorset = \"varibow\",   color_order = \"sort\" )"},{"path":"/reference/annotate_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate colors and ids for categorical annotations that are factors — annotate_factor","text":"df data frame annotate col name factor column annotate base base name annotation, wil used desc table. provided, use col base. na_val value use replace NAs. default = \"ZZ_Missing\". colorset colorset use assigning category colors. Options \"varibow\" (default), \"rainbow\",\"viridis\",\"inferno\",\"magma\", \"terrain\" color_order order colors assigned. Options \"sort\" \"random\". \"sort\" assigns colors order; \"random\" randomly assign colors.","code":""},{"path":"/reference/annotate_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate colors and ids for categorical annotations that are factors — annotate_factor","text":"modified data frame: annotated column renamed base_label, base_id base_color columns appended","code":""},{"path":"/reference/annotate_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate colors and ids for numeric annotations — annotate_num","title":"Generate colors and ids for numeric annotations — annotate_num","text":"Generate colors ids numeric annotations","code":""},{"path":"/reference/annotate_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate colors and ids for numeric annotations — annotate_num","text":"","code":"annotate_num(   df,   col = NULL,   base = NULL,   scale = \"log10\",   na_val = 0,   colorset = c(\"darkblue\", \"white\", \"red\") )"},{"path":"/reference/annotate_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate colors and ids for numeric annotations — annotate_num","text":"df data frame annotate col name numeric column annotate base base name annotation, wil used desc table. provided, use col base. scale scale use assigning colors. Options \"linear\",\"log10\",\"log2, \"zscore\" na_val value use replace NAs. default = 0. colorset vector colors use color gradient. default = c(\"darkblue\",\"white\",\"red\")","code":""},{"path":"/reference/annotate_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate colors and ids for numeric annotations — annotate_num","text":"modified data frame: annotated column renamed base_label, base_id base_color columns appended","code":""},{"path":"/reference/auto_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically format an annotation file — auto_annotate","title":"Automatically format an annotation file — auto_annotate","text":"takes anno file input stage properly annotates compatability shiny scrattch functions.  particular, ensures columns label, id, color, factors.  overwrite columns already properly process.","code":""},{"path":"/reference/auto_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically format an annotation file — auto_annotate","text":"","code":"auto_annotate(   anno,   sample_identifier = \"cell_id\",   scale_num = \"predicted\",   na_val_num = 0,   colorset_num = c(\"darkblue\", \"white\", \"red\"),   sort_label_cat = TRUE,   na_val_cat = \"ZZ_Missing\",   colorset_cat = \"varibow\",   color_order_cat = \"sort\" )"},{"path":"/reference/auto_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically format an annotation file — auto_annotate","text":"anno existing annotation data frame sample_identifier name column contains sample names. default = \"cell_id\" scale_num color scaling numeric values \"predicted\" (default highly recommended; return either \"linear\" \"log10\" depending scaling), \"linear\",\"log10\",\"log2\", \"zscore\". na_val_num value use replace NAs numeric columns. default = 0. colorset_num vector colors use color gradient. default = c(\"darkblue\",\"white\",\"red\") sort_label_cat logical value determine data category columns arranged alphanumerically ids assigned. default = T. na_val_cat value use replace NAs category factor variables. default = \"ZZ_Missing\". colorset_cat colorset use assigning category factor colors. Options \"varibow\" (default), \"rainbow\",\"viridis\",\"inferno\",\"magma\", \"terrain\" color_order_cat order colors assigned cat factor variables. Options \"sort\" \"random\". \"sort\" (default) assigns colors order; \"random\" randomly assign colors.","code":""},{"path":"/reference/auto_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically format an annotation file — auto_annotate","text":"updated data frame automatically annotated properly","code":""},{"path":"/reference/buildTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"This function builds the minimum files required for Shiny Precomputed clusters must be provided. In the anndata object these will be stored using the term ","title":"This function builds the minimum files required for Shiny Precomputed clusters must be provided. In the anndata object these will be stored using the term ","text":"function builds minimum files required Shiny Precomputed clusters must provided.  anndata object stored using term \"cluster\".  hierarchy[-1] anything cluster, existing \"cluster\" column overwritten hierarchy[-1].  Values can provided without colors ids (e.g., \"cluster\") (e.g., \"cluster_label\" + \"cluster_color\" + \"cluster_id\").  case cluster_colors ignored colors taken directly metadata.  Cluster_id's overwritten match dendrogram order.  (NOTE: functionality metadata colors still development.)","code":""},{"path":"/reference/buildTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function builds the minimum files required for Shiny Precomputed clusters must be provided. In the anndata object these will be stored using the term ","text":"","code":"buildTaxonomy(   title = \"AIT\",   meta.data,   hierarchy,   counts = NULL,   normalized.expr = NULL,   highly_variable_genes = NULL,   marker_genes = NULL,   ensembl_id = NULL,   gene.meta.data = NULL,   cluster_stats = NULL,   embeddings = NULL,   number.of.pcs = 30,   dend = NA,   taxonomyDir = getwd(),   cluster_colors = NULL,   default_embedding = NULL,   uns.variables = list(),   subsample = 2000,   reorder.dendrogram = FALSE,   add.dendrogram.markers = FALSE,   addMapMyCells = TRUE,   save.normalized.data = TRUE,   check.taxonomy = TRUE,   print.messages = TRUE,   ... )"},{"path":"/reference/buildTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function builds the minimum files required for Shiny Precomputed clusters must be provided. In the anndata object these will be stored using the term ","text":"title file name assign Taxonomy h5ad (default=\"AIT\"; recommended create title!). meta.data Meta.data corresponding count matrix. Rownames must equal colnames counts. \"clusters\" must provided (see hierarchy[-1] notes). hierarchy List term_set_labels Taxonomy ordered gross fine (e.g., neighborhood, class, subclass, supertype). counts count matrix sparse format: dgCMatrix. buildTaxonomy can work count matrices cells rows columns, long counts row names column names. highly_variable_genes Set features defined highly variable genes number binary genes calculate (recommend ~1000 - ~5000, <100 ~5000 cell types). feature list provided, provide either named list vectors, single vector (case name \"highly_variable_genes_standard\" used). \"highly_variable_genes_standard\" also used calculated variable genes. Optional input, proper mapping strongly recommend including either highly_variable_genes marker_genes. marker_genes Set features defined marker genes. Provide either named list vectors, single vector (case name \"marker_genes_mode.name\" used). ensembl_id vector ensembl ids corresponding gene symbols counts. gene.meta.data Either NULL (default) data frame additional gene information include var component anndata cluster_stats matrix median gene expression cluster. Cluster names must exactly match meta.data$cluster.  provided, get saved \"varm$cluster_id_median_expr_mode\" embeddings Dimensionality reduction coordinate data.frame 2 columns string column name marker_genes variable_genes UMAP calculated. coordinates provided, rownames must equal colnames counts.  Either provide named list single data.frame (case name \"default_standard\" used). embeddings required, inclusion least one embedding strongly recommended.#' number..pcs Number principle components use calculating UMAP coordinates (default=30). used embeddings corresponds variable gene column UMAP calculated. dend Existing dendrogram associated taxonomy (e.g., one calculated elsewhere). provided, dend must BINARY tree. Can also input string column name marker_genes variable_genes dendrogram calculated. NULL function figure gene set want, dendrogram calculated. Failure define dendrogram prevent mapping algorithms working properly! default build dendrogram using first highly_variable_genes marker_genes set. taxonomyDir location save Shiny objects, e.g. \"/allen/programs/celltypes/workgroups/rnaseqanalysis/shiny/10x_seq/NHP_BG_20220104/\" cluster_colors optional named character vector values correspond colors names correspond celltypes hierarchy[-1].  vector incomplete, warning thrown ignored. cluster_colors can also provided metadata (see notes) default_embedding string indicating embedding use calculations.  Default (NULL) take first one provided embeddings. uns.variables provided, list additional variables included uns.  See Notes schema variables otherwise accounted . subsample number cells retain per cluster (default = 2000) reorder.dendrogram dendogram attempt match preset order? (Default = FALSE).  TRUE, dendrogram attempts match celltype factor order closely possible (celltype character vector rather factor, sort clusters alphabetically, ideal). add.dendrogram.markers TRUE (default=FALSE), also add dendrogram markers prep taxonomy tree mapping addMapMyCells TRUE (default), also prep taxonomy hierarchical mapping save.normalized.data TRUE (default), save normalized data writing h5ad file.  Otherwise, remove normalized data save space (case recalculated automatically upon loadTaxonomy) check.taxonomy taxonomy checked see follows AIT schema (default=TRUE) print.messages check.taxonomy occurs, messages written screen addition log file (default=TRUE) ... Additional variables passed addDendrogramMarkers Additional uns.variables: dataset_purl: Link molecular data present X raw.X. batch_condition: Keys defining batches normalization/integration algorithms. Used cellxgene. reference_genome: Reference genome used align molecular measurements.","code":""},{"path":"/reference/buildTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function builds the minimum files required for Shiny Precomputed clusters must be provided. In the anndata object these will be stored using the term ","text":"AIT anndata object specified format (return.anndata=TRUE)","code":""},{"path":"/reference/buildTaxonomyMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a taxonomy mode for mapping to taxonomy subset (or child) — buildTaxonomyMode","title":"Create a taxonomy mode for mapping to taxonomy subset (or child) — buildTaxonomyMode","text":"function creates new mode mapping subset taxonomy. includes filtering cells, setting new variable genes /marker genes, calculating mapping statistics,","code":""},{"path":"/reference/buildTaxonomyMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a taxonomy mode for mapping to taxonomy subset (or child) — buildTaxonomyMode","text":"","code":"buildTaxonomyMode(   AIT.anndata,   mode.name,   retain.cells = NULL,   retain.clusters = NULL,   subsample = 100,   highly_variable_genes = NULL,   marker_genes = NULL,   embeddings = NULL,   number.of.pcs = 30,   add.dendrogram.markers = FALSE,   addMapMyCells = TRUE,   overwrite = FALSE,   save.normalized.data = TRUE,   write.taxonomy = TRUE,   ... )"},{"path":"/reference/buildTaxonomyMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a taxonomy mode for mapping to taxonomy subset (or child) — buildTaxonomyMode","text":"AIT.anndata reference taxonomy anndata object. mode.name name identify new taxonomy version. retain.cells boolean vector length number cells indicating cells retained (TRUE) filtered (FALSE) -- character vector sample names indicating cells retained. Default retain cells included \"stadard\" mode. retain.clusters character vector cluster names (e.g., values \"cluster_id\" column) indicating clusters retained. Default retain clusters least 2 retained cells (clusters exactly 1 cell can cause functions crash). subsample number cells retain per cluster (default = 100). Note subsampling happens retain.cells retail.clusters filtering. highly_variable_genes Set features defined highly variable genes number binary genes calculate (recommend ~1000 - ~5000, <100 ~5000 cell types). feature list provided, provide either named list vectors, single vector (case name \"highly_variable_genes_mode.name\" used). \"highly_variable_genes_mode.name\" also used calculated variable genes. Optional input, proper mapping recommend including either highly_variable_genes marker_genes. nothing provided (default=NULL), standard mode markers used mapping algorithms based gene lists may cause problems. marker_genes Set features defined marker genes. Provide either named list vectors, single vector (case name \"marker_genes_mode.name\" used). embeddings Dimensionality reduction coordinate data.frame 2 columns string column name marker_genes variable_genes UMAP calculated. coordinates provided, rownames must equal colnames counts.  Either provide named list single data.frame (case name \"default_mode.name\" used). Optional - nothing provided (default=NULL) relevant subset default standard embedding used. number..pcs Number principle components use calculating UMAP coordinates (default=30). used embeddings corresponds variable gene column UMAP calculated. add.dendrogram.markers TRUE (default=FALSE), also add dendrogram markers prep taxonomy tree mapping addMapMyCells TRUE (default), also prep mode taxonomy hierarchical MapMyCells mapping overwrite mode.name already exists, overwritten (default = FALSE) save.normalized.data TRUE (default), save normalized data writing h5ad file.  Otherwise, remove normalized data save space (case recalculated automatically upon loadTaxonomy) ... Additional variables passed addDendrogramMarkers","code":""},{"path":"/reference/buildTaxonomyMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a taxonomy mode for mapping to taxonomy subset (or child) — buildTaxonomyMode","text":"AIT.anndata updated AIT.anndata variable new content addded relevant mode.name (also called \"Child taxonomy\").","code":""},{"path":"/reference/build_dend.html","id":null,"dir":"Reference","previous_headings":"","what":"Build dend (updated to specify dendextend version of ","title":"Build dend (updated to specify dendextend version of ","text":"Build dend (updated specify dendextend version \"set\")","code":""},{"path":"/reference/build_dend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Build dend (updated to specify dendextend version of ","text":"","code":"build_dend(   cl.dat,   cl.cor = NULL,   l.rank = NULL,   l.color = NULL,   nboot = 100,   ncores = 1 )"},{"path":"/reference/build_dend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Build dend (updated to specify dendextend version of ","text":"cl.dat Normalized data REFERENCE data set cl.cor Matrix cell x cell correlations (calculated provided) l.rank Factor cluster order (specific format) l.color Factor clluster colors (specific format) nboot Number bootstrapping runs calculate membership (default = 100) ncores Number cores performing calculations","code":""},{"path":"/reference/build_dend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Build dend (updated to specify dendextend version of ","text":"dendrogram couple related things","code":""},{"path":"/reference/build_reference.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for building the standard reference format, including adding marker genes to the clustering tree — build_reference","title":"Function for building the standard reference format, including adding marker genes to the clustering tree — build_reference","text":"Function building standard reference format, including adding marker genes clustering tree","code":""},{"path":"/reference/build_reference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for building the standard reference format, including adding marker genes to the clustering tree — build_reference","text":"","code":"build_reference(   cl,   norm.dat,   dend,   de.genes,   cl.label = NULL,   up.gene.score = NULL,   down.gene.score = NULL,   n.markers = 30 )"},{"path":"/reference/build_reference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for building the standard reference format, including adding marker genes to the clustering tree — build_reference","text":"cl Factor vector values cluster ids (e.g., numeric vector corresponding cell type order tree) values sample ids cells (e.g., vector length = number cells) norm.dat log normalized expression data dend Input dendrogram de.genes output display_cl function cl.label Factor vector values cluster ids (e.g., numeric vector corresponding cell type order tree) values dendrogram labels (e.g., vector length = number clusters) .gene.score Output get_gene_score .gene.score Output get_gene_score n.markers Number marker genes return per comparison (default=30)","code":""},{"path":"/reference/build_reference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for building the standard reference format, including adding marker genes to the clustering tree — build_reference","text":"list dend updated dendrogram markers attached cl.dat matrix cluster means","code":""},{"path":"/reference/checkMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether metadata is in scrattch.taxonomy format — checkMetadata","title":"Checks whether metadata is in scrattch.taxonomy format — checkMetadata","text":"Messages printed screen.","code":""},{"path":"/reference/checkMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether metadata is in scrattch.taxonomy format — checkMetadata","text":"","code":"checkMetadata(   meta.data,   schema,   messages = c(),   isValid = FALSE,   isWarning = FALSE,   print.messages = TRUE,   ... )"},{"path":"/reference/checkMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether metadata is in scrattch.taxonomy format — checkMetadata","text":"meta.data meta.data object tested schema schema data.frame. messages current messages append . isValid current call whether taxonomy valid. isWarning current call whether taxonomy valid. print.messages Print messages log file (FALSE; default) also screen (TRUE) ... Additional parameters ._validate_schema_element .validate_var_elements (can ignored cases)","code":""},{"path":"/reference/checkMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether metadata is in scrattch.taxonomy format — checkMetadata","text":"Logical vector indicating whether inputted taxonomy valid scrattch.taxonomy format.","code":""},{"path":"/reference/checkTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks whether an anndata object is in scrattch.taxonomy format and returns a log-file if not — checkTaxonomy","title":"Checks whether an anndata object is in scrattch.taxonomy format and returns a log-file if not — checkTaxonomy","text":"breaking issues cause function return FALSE.  potential issues still return TRUE output warning stderr.  messages get returned log file.","code":""},{"path":"/reference/checkTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks whether an anndata object is in scrattch.taxonomy format and returns a log-file if not — checkTaxonomy","text":"","code":"checkTaxonomy(   AIT.anndata,   log.file.path = getwd(),   print.messages = FALSE,   pull_ensembl = FALSE,   validate_percent_ensembl = 60,   pull_assay = FALSE,   pull_cl = FALSE,   validate_percent_cl = 80,   pull_ncbitaxon = FALSE,   pull_uberon = FALSE,   pull_brain_atlases = FALSE,   pull_hancestro = FALSE,   pull_mondo = FALSE,   ... )"},{"path":"/reference/checkTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks whether an anndata object is in scrattch.taxonomy format and returns a log-file if not — checkTaxonomy","text":"AIT.anndata reference taxonomy anndata object tested log.file.path directory output logfile errors warnings (; default getwd()) print.messages Print messages log file (FALSE; default) also screen (TRUE) pull_ensembl FALSE (default) loads list Ensembl terms NCBI; otherwise, pulls NCBI (slow) validate_percent_ensembl Percent entries must correspond valid Ensembl terms validate pull_assay FALSE (default) loads list EFO terms (assays); otherwise pulls EBI (slow) pull_cl FALSE (default) loads preset list CL terms OBO; otherwise pulls OBO validate_percent_cl Percent entries must correspond valid CL terms validate pull_ncbitaxon FALSE (default) loads list species gene information NCBI; otherwise pulls OBO (slow) pull_uberon FALSE (default) loads list anatomical regions UBERON; otherwise pulls OBO pull_brain_atlases FALSE (default) loads list brain atlas ids; otherwise pulls brain-bican pull_hancestro FALSE (default) loads list HANCESTRO terms; otherwise, pulls OBO pull_mondo FALSE (default) loads list MONDO terms; otherwise, pulls OBO ... Additional parameters ._validate_schema_elements .validate_var_elements (can ignored cases)","code":""},{"path":"/reference/checkTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks whether an anndata object is in scrattch.taxonomy format and returns a log-file if not — checkTaxonomy","text":"Logical vector indicating whether inputted taxonomy valid scrattch.taxonomy format.","code":""},{"path":"/reference/computeOntologyTerms.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates a metadata data frame with ontology terms — computeOntologyTerms","title":"Updates a metadata data frame with ontology terms — computeOntologyTerms","text":"See updateTaxonomyMetadata details. computeOntologyTerms wrapper updateTaxonomyMetadata defaults compute ontology terms everything (except CL), anything else. breaking issues cause function return FALSE.  potential issues still return TRUE output warning stderr.  messages get returned log file.","code":""},{"path":"/reference/computeOntologyTerms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates a metadata data frame with ontology terms — computeOntologyTerms","text":"","code":"computeOntologyTerms(   metadata,   log.file.path = getwd(),   log.file.name = \"computeOntologyTerms_log.txt\",   standardize.metadata = FALSE,   compute.ontology.terms = c(\"organism\", \"anatomical_region\", \"self_reported_sex\",     \"self_reported_ethnicity\", \"assay\", \"disease\"),   compute.brain.atlas.terms = \"DHBA\",   convert.regions.to.names = TRUE,   compute.cl.terms = NULL,   print.messages = FALSE )"},{"path":"/reference/computeOntologyTerms.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates a metadata data frame with ontology terms — computeOntologyTerms","text":"list \"metadata\" updated metadata file additional list entries corresponding conversions surrounding ontology terms.  original metadata data frame also returned.","code":""},{"path":"/reference/cpm.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","title":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","text":"input can base R matrix sparse matrix Matrix package.","code":""},{"path":"/reference/cpm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","text":"","code":"cpm(counts, sf = NULL, denom = 1e+06, cells.as.rows = FALSE)"},{"path":"/reference/cpm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","text":"counts matrix, dgCMatrix, dgTMatrix count values. sf vector numeric values representing total number reads. count matrix includes genes, value calulated default (sf=NULL) accurate; however, count matrix represents small fraction genes, recommend also providing value. denom Denominator counts scaled . default (1 million) commonly used, 10000 also common sparser droplet-based sequencing methods. cells..rows Set FALSE (default) rows genes columns cells TRUE rows cells columns genes.","code":""},{"path":"/reference/cpm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","text":"matrix, dgCMatrix, dgTMatrix CPM values (matching input)","code":""},{"path":"/reference/cpm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a matrix of raw counts to a matrix of Counts per Million values — cpm","text":"function expects columns correspond samples, rows genes, can also take transpose specified cells..rows=TRUE.","code":""},{"path":"/reference/createShiny.html","id":null,"dir":"Reference","previous_headings":"","what":"This function builds the minimum files required for Shiny — createShiny","title":"This function builds the minimum files required for Shiny — createShiny","text":"Precomputed clusters must provided.  anndata object stored using term \"cluster\".  celltypeColumn anything cluster, existing \"cluster\" column overwritten celltypeColumn.  Values can provided without colors ids (e.g., \"cluster\") (e.g., \"cluster_label\" + \"cluster_color\" + \"cluster_id\").  case cluster_colors ignored colors taken directly metadata.  Cluster_id's overwritten match dendrogram order.","code":""},{"path":"/reference/createShiny.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function builds the minimum files required for Shiny — createShiny","text":"","code":"createShiny(AIT.anndata, shinyDir, metadata_names = NULL)"},{"path":"/reference/createShiny.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function builds the minimum files required for Shiny — createShiny","text":"AIT.anndata reference taxonomy anndata object. shinyDir location save files MolGen Shiny (AIBS) metadata_names optional named character vector vector NAMES correspond columns metadata matrix vector VALUES correspond metadata displayed Shiny. used writing desc.feather file later.","code":""},{"path":"/reference/createShiny.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function builds the minimum files required for Shiny — createShiny","text":"AIT anndata object specified format (return.anndata=TRUE)","code":""},{"path":"/reference/create_desc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a generic description file — create_desc","title":"Create a generic description file — create_desc","text":"Create generic description file","code":""},{"path":"/reference/create_desc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a generic description file — create_desc","text":"","code":"create_desc(   dat,   name = colnames(dat),   use_label_columns = FALSE,   start_columns = NULL )"},{"path":"/reference/create_desc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a generic description file — create_desc","text":"dat data frame like create description file name desired names element description file (default column names) use_label_columns columns containing \"_label\" included (default = FALSE) start_columns character vector variables include first list (default = NULL, \"cluster\" common choice)","code":""},{"path":"/reference/create_desc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a generic description file — create_desc","text":"data.frame columns \"base\", \"name\", \"type\" writing tome","code":""},{"path":"/reference/dend_to_json.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R dendrogram to json — dend_to_json","title":"Convert R dendrogram to json — dend_to_json","text":"Convert R dendrogram json","code":""},{"path":"/reference/dend_to_json.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R dendrogram to json — dend_to_json","text":"","code":"dend_to_json(dend)"},{"path":"/reference/dend_to_json.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R dendrogram to json — dend_to_json","text":"dend R dendrogram object","code":""},{"path":"/reference/dend_to_json.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert R dendrogram to json — dend_to_json","text":"json file","code":""},{"path":"/reference/dot-_find_best_ontology_match.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will return the best matching ontology term id given a name and a distance to that best match — ._find_best_ontology_match","title":"This function will return the best matching ontology term id given a name and a distance to that best match — ._find_best_ontology_match","text":"function return best matching ontology term id given name distance best match","code":""},{"path":"/reference/dot-_find_best_ontology_match.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will return the best matching ontology term id given a name and a distance to that best match — ._find_best_ontology_match","text":"","code":"._find_best_ontology_match(search_term, ontology, top_n = 1)"},{"path":"/reference/dot-_find_best_ontology_match.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will return the best matching ontology term id given a name and a distance to that best match — ._find_best_ontology_match","text":"search_term Name ontology term want try match (e.g., \"frontal cortex\" \"human\") ontology Variable class ontology_index holds complete ontology read obo format using get_OBO. top_n Number top matches return (default = 1)","code":""},{"path":"/reference/dot-_find_best_ontology_match.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will return the best matching ontology term id given a name and a distance to that best match — ._find_best_ontology_match","text":"character indicating associated id name distance closest matching term","code":""},{"path":"/reference/dot-_get_schema_def.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will return information about a given schema Key — ._get_schema_def","title":"This function will return information about a given schema Key — ._get_schema_def","text":"function return information given schema Key","code":""},{"path":"/reference/dot-_get_schema_def.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will return information about a given schema Key — ._get_schema_def","text":"","code":"._get_schema_def(key = NULL)"},{"path":"/reference/dot-_get_schema_def.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will return information about a given schema Key — ._get_schema_def","text":"key schema Key provide information user.","code":""},{"path":"/reference/dot-_get_schema_def.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will return information about a given schema Key — ._get_schema_def","text":"internal schema information","code":""},{"path":"/reference/dot-_get_schema_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will return schema information for a given anndata Component and schema element Type — ._get_schema_elements","title":"This function will return schema information for a given anndata Component and schema element Type — ._get_schema_elements","text":"function return schema information given anndata Component schema element Type","code":""},{"path":"/reference/dot-_get_schema_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will return schema information for a given anndata Component and schema element Type — ._get_schema_elements","text":"","code":"._get_schema_elements(schema, component, type = \"MUST\")"},{"path":"/reference/dot-_get_schema_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will return schema information for a given anndata Component and schema element Type — ._get_schema_elements","text":"schema schema data.frame. component schema Component provide information . type schema element Type provide information .","code":""},{"path":"/reference/dot-_get_schema_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will return schema information for a given anndata Component and schema element Type — ._get_schema_elements","text":"schema elements","code":""},{"path":"/reference/dot-_transfer_factor_levels.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert one string back to a factor with matched, but different, values — ._transfer_factor_levels","title":"Convert one string back to a factor with matched, but different, values — ._transfer_factor_levels","text":"function speficially targeting changes.  vector gets minor updates due misspellings ontologies, factor order original vector retained, even though values slightly changed.","code":""},{"path":"/reference/dot-_transfer_factor_levels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert one string back to a factor with matched, but different, values — ._transfer_factor_levels","text":"","code":"._transfer_factor_levels(new.string, initial.factor)"},{"path":"/reference/dot-_transfer_factor_levels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert one string back to a factor with matched, but different, values — ._transfer_factor_levels","text":"new.string character string convert factor initial.factor matched original factor variable transfer string","code":""},{"path":"/reference/dot-_transfer_factor_levels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert one string back to a factor with matched, but different, values — ._transfer_factor_levels","text":"character string specific characters changed lower case","code":""},{"path":"/reference/dot-_validate_ait_modes.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will validate the modes in an AIT file — ._validate_ait_modes","title":"This function will validate the modes in an AIT file — ._validate_ait_modes","text":"function validate modes AIT file","code":""},{"path":"/reference/dot-_validate_ait_modes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will validate the modes in an AIT file — ._validate_ait_modes","text":"","code":"._validate_ait_modes(AIT.anndata, messages, isValid, isWarning)"},{"path":"/reference/dot-_validate_ait_modes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will validate the modes in an AIT file — ._validate_ait_modes","text":"AIT.anndata AIT anndata object validate. messages current messages append . isValid current isValid status. isWarning current isWarning status.","code":""},{"path":"/reference/dot-_validate_ait_modes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will validate the modes in an AIT file — ._validate_ait_modes","text":"list messages, isValid logical call, isWarning logical call","code":""},{"path":"/reference/dot-_validate_schema_element.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will validate a given column against the schema — ._validate_schema_element","title":"This function will validate a given column against the schema — ._validate_schema_element","text":"function validate given column schema","code":""},{"path":"/reference/dot-_validate_schema_element.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will validate a given column against the schema — ._validate_schema_element","text":"","code":"._validate_schema_element(   column,   column_def,   messages,   isValid,   pull_assay = FALSE,   pull_cl = FALSE,   validate_percent_cl = 80,   pull_ncbitaxon = FALSE,   pull_uberon = FALSE,   pull_brain_atlases = FALSE,   pull_hancestro = FALSE,   pull_mondo = FALSE )"},{"path":"/reference/dot-_validate_schema_element.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will validate a given column against the schema — ._validate_schema_element","text":"column vector entrees column validate. column_def schema definition column. messages current messages append . isValid current call whether taxonomy valid. pull_assay FALSE (default) loads list EFO terms (assays); otherwise pulls EBI (slow) pull_cl FALSE (default) loads preset list CL terms OBO; otherwise pulls OBO validate_percent_cl Percent entries must correspond valid CL terms validate pull_ncbitaxon FALSE (default) loads list species gene information NCBI; otherwise pulls OBO (slow) pull_uberon FALSE (default) loads list anatomical regions UBERON; otherwise pulls OBO pull_brain_atlases FALSE (default) loads list brain atlas ids; otherwise pulls brain-bican pull_hancestro FALSE (default) loads list HANCESTRO terms; otherwise, pulls OBO pull_mondo FALSE (default) loads list MONDO terms; otherwise, pulls OBO","code":""},{"path":"/reference/dot-_validate_schema_element.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will validate a given column against the schema — ._validate_schema_element","text":"list messages isValid logical call","code":""},{"path":"/reference/dot-_validated_embeddings.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will validate the embeddings in an AIT file — ._validated_embeddings","title":"This function will validate the embeddings in an AIT file — ._validated_embeddings","text":"function validate embeddings AIT file","code":""},{"path":"/reference/dot-_validated_embeddings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will validate the embeddings in an AIT file — ._validated_embeddings","text":"","code":"._validated_embeddings(AIT.anndata, messages, isValid, isWarning)"},{"path":"/reference/dot-_validated_embeddings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will validate the embeddings in an AIT file — ._validated_embeddings","text":"AIT.anndata AIT anndata object validate. messages current messages append . isValid current isValid status. isWarning current isWarning status.","code":""},{"path":"/reference/dot-_validated_embeddings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will validate the embeddings in an AIT file — ._validated_embeddings","text":"list messages, isValid logical call, isWarning logical call","code":""},{"path":"/reference/dot-checkBuildTaxonomyParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to sanity check buildTaxonomy parameters — .checkBuildTaxonomyParams","title":"Function to sanity check buildTaxonomy parameters — .checkBuildTaxonomyParams","text":"Function sanity check buildTaxonomy parameters","code":""},{"path":"/reference/dot-checkBuildTaxonomyParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to sanity check buildTaxonomy parameters — .checkBuildTaxonomyParams","text":"","code":".checkBuildTaxonomyParams(   counts,   normalized.expr,   meta.data,   highly_variable_genes,   marker_genes,   embeddings,   celltypeColumn,   cluster_stats,   taxonomyDir,   title,   dend )"},{"path":"/reference/dot-checkBuildTaxonomyParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to sanity check buildTaxonomy parameters — .checkBuildTaxonomyParams","text":"counts count matrix (cells x genes) meta.data data.frame cell metadata celltypeColumn column name meta.data contains cell type information umap.coords matrix UMAP coordinates","code":""},{"path":"/reference/dot-checkBuildTaxonomyParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to sanity check buildTaxonomy parameters — .checkBuildTaxonomyParams","text":"Stops function parameters expected","code":""},{"path":"/reference/dot-formatMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to update meta.data — .formatMetadata","title":"Function to update meta.data — .formatMetadata","text":"Function update meta.data","code":""},{"path":"/reference/dot-formatMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to update meta.data — .formatMetadata","text":"","code":".formatMetadata(   meta.data,   cluster_colors = NULL,   sample_identifier = \"cell_id\" )"},{"path":"/reference/dot-formatMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to update meta.data — .formatMetadata","text":"meta.data data.frame cell metadata cluster_colors named vector colors cluster sample_identifier name column contains sample names. default = \"cell_id\"","code":""},{"path":"/reference/dot-formatMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to update meta.data — .formatMetadata","text":"auto_annotated meta.data","code":""},{"path":"/reference/dot-map_dend.html","id":null,"dir":"Reference","previous_headings":"","what":"map_dend — .map_dend","title":"map_dend — .map_dend","text":"map_dend","code":""},{"path":"/reference/dot-map_dend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_dend — .map_dend","text":"","code":".map_dend(   dend,   cl.dat,   map.dat,   select.cells = colnames(map.dat),   p = 0.8,   low.th = 0.1,   default.markers = NULL,   seed = 42 )"},{"path":"/reference/dot-map_dend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_dend — .map_dend","text":"dend dendrogram R format cl.dat gene cell type matrix (think?) map.dat normalized data MAPPING data set. select.cells names cells map (e.g., column names cell x gene matrix) p proportion marker genes include iteration mapping algorithm. low.th minimum difference Pearson correlation required decide branch default.markers genes include every bootstrap run (default none) seed = random seed cl cluster factor object compare reference","code":""},{"path":"/reference/dot-map_dend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_dend — .map_dend","text":"tree mapping dendrogram table (cells x nodes values probabilities)","code":""},{"path":"/reference/dot-map_dend_membership.html","id":null,"dir":"Reference","previous_headings":"","what":"map_dend_membership — .map_dend_membership","title":"map_dend_membership — .map_dend_membership","text":"map_dend_membership","code":""},{"path":"/reference/dot-map_dend_membership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"map_dend_membership — .map_dend_membership","text":"","code":".map_dend_membership(   dend,   cl.dat,   map.dat,   map.cells,   mc.cores = 10,   bs.num = 100,   seed = 42,   ... )"},{"path":"/reference/dot-map_dend_membership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"map_dend_membership — .map_dend_membership","text":"dend R dendrogram specific format cl.dat gene cell type matrix (think?) map.dat normalized data MAPPING data set. map.cells names cells map (e.g., column names cell x gene matrix) mc.cores number cores run mapping bs.num Number bootstrapping runs calculate membership (default = 100) seed = random seed ... variables pass map_dend","code":""},{"path":"/reference/dot-map_dend_membership.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"map_dend_membership — .map_dend_membership","text":"membership table","code":""},{"path":"/reference/dot-resolve_cl.html","id":null,"dir":"Reference","previous_headings":"","what":"resolve_cl — .resolve_cl","title":"resolve_cl — .resolve_cl","text":"resolve_cl","code":""},{"path":"/reference/dot-resolve_cl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"resolve_cl — .resolve_cl","text":"","code":".resolve_cl(   cl.g,   cl.dat,   markers,   map.dat,   select.cells,   p = 0.8,   low.th = 0.1,   seed = 42 )"},{"path":"/reference/dot-resolve_cl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"resolve_cl — .resolve_cl","text":"cl.g Cluster labels format markers Genes use markers function map.dat normalized data MAPPING data set. select.cells names cells map (e.g., column names cell x gene matrix) p proportion marker genes include iteration mapping algorithm. low.th minimum difference Pearson correlation required decide branch seed random seed reproducibility cl.med Cluster medians","code":""},{"path":"/reference/dot-resolve_cl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"resolve_cl — .resolve_cl","text":"mapped.cl output","code":""},{"path":"/reference/dot-schemaAIT.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to define AIT schema — .schemaAIT","title":"Function to define AIT schema — .schemaAIT","text":"Function define AIT schema","code":""},{"path":"/reference/dot-schemaAIT.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to define AIT schema — .schemaAIT","text":"","code":".schemaAIT()"},{"path":"/reference/dot-schemaAIT.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to define AIT schema — .schemaAIT","text":"AIT schema","code":""},{"path":"/reference/dot-validate_var_elements.html","id":null,"dir":"Reference","previous_headings":"","what":"This function will validate the var in an AIT file — .validate_var_elements","title":"This function will validate the var in an AIT file — .validate_var_elements","text":"function validate var AIT file","code":""},{"path":"/reference/dot-validate_var_elements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function will validate the var in an AIT file — .validate_var_elements","text":"","code":".validate_var_elements(   AIT.anndata,   messages,   isValid,   isWarning,   validate_percent_ensembl = 60,   pull_ensembl = FALSE )"},{"path":"/reference/dot-validate_var_elements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function will validate the var in an AIT file — .validate_var_elements","text":"AIT.anndata AIT anndata object validate. messages current messages append . isValid current isValid status. isWarning current isWarning status. validate_percent_ensembl Percent entries must correspond valid Ensembl terms validate pull_ensembl FALSE (default) loads list Ensembl terms NCBI; otherwise, pulls NCBI (slow)","code":""},{"path":"/reference/dot-validate_var_elements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function will validate the var in an AIT file — .validate_var_elements","text":"list messages, isValid logical call, isWarning logical call","code":""},{"path":"/reference/file.path.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct Path to File across platforms — file.path","title":"Construct Path to File across platforms — file.path","text":"Construct path file components platform-independent way. version wrapper base file.path function also reverses '/' direction can attempt add double slashes needed.","code":""},{"path":"/reference/file.path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct Path to File across platforms — file.path","text":"","code":"file.path(   ...,   path_separator = getOption(\"path_separator\"),   leading_string = getOption(\"leading_string\"),   change_path_chars = NULL,   change_leading_chars = c(\"/\", \"\\\\\", \"\\\\\\\\\") )"},{"path":"/reference/file.path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct Path to File across platforms — file.path","text":"... character vectors. Long vectors supported. path_separator path separator use (assumed ASCII). leading_string leading character(s) (e.g., '/' '\\\\'). string can provided, default \"leading_string\" global variable set takes variable, otherwise guessed based operating system /existence file file path change_path_chars characters changes path_separator value (default NULL = \"none\"). want change slashes file path correct direction set change_chars = c(\"/\",\"\\\")) change_leading_chars characters changes leading_string value (default = c(\"/\",\"\\\",\"\\\\\")). preserve local file paths.","code":""},{"path":"/reference/file.path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct Path to File across platforms — file.path","text":"file path slashes going correct direction.","code":""},{"path":"/reference/firsttolower.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert the first character of a string to lowercase — firsttolower","title":"Convert the first character of a string to lowercase — firsttolower","text":"Convert first character string lowercase","code":""},{"path":"/reference/firsttolower.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert the first character of a string to lowercase — firsttolower","text":"","code":"firsttolower(str)"},{"path":"/reference/firsttolower.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert the first character of a string to lowercase — firsttolower","text":"str character string","code":""},{"path":"/reference/firsttolower.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert the first character of a string to lowercase — firsttolower","text":"character string specific characters changed lower case","code":""},{"path":"/reference/geneSymbolToEnsembl.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert gene symbols to Ensembl IDs — geneSymbolToEnsembl","title":"Convert gene symbols to Ensembl IDs — geneSymbolToEnsembl","text":"NOTE: function requires internet connection.","code":""},{"path":"/reference/geneSymbolToEnsembl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert gene symbols to Ensembl IDs — geneSymbolToEnsembl","text":"","code":"geneSymbolToEnsembl(   gene.symbols,   ncbi.taxid = 9606,   use.synonyms = TRUE,   remove.duplicates = TRUE,   includeNonMammalianSpecies = FALSE )"},{"path":"/reference/geneSymbolToEnsembl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert gene symbols to Ensembl IDs — geneSymbolToEnsembl","text":"gene.symbols List gene symbols convert Ensembl IDs. ncbi.taxid integer part NCBITaxon ID species want convert genes . use.synonyms TRUE (default) search synonyms current gene symbols try match Ensembl IDs remove.duplicates TRUE (default) genes share Ensembl IDs genes Ensembl IDs set NA avoid ambiguity. cases duplicate introduced synonyms, original gene.symbol retain Ensembl IDs synonym duplicates set NA. includeNonMammalianSpecies Default (FALSE) considers mammalian species. Set TRUE non-mammalian species considered (much slower).","code":""},{"path":"/reference/geneSymbolToEnsembl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert gene symbols to Ensembl IDs — geneSymbolToEnsembl","text":"Ensembl IDs input gene.symbols (NA found duplicated)","code":""},{"path":"/reference/getNCBITaxon.html","id":null,"dir":"Reference","previous_headings":"","what":"Determine the NCBITaxon ID for a species from the scientific name — getNCBITaxon","title":"Determine the NCBITaxon ID for a species from the scientific name — getNCBITaxon","text":"function returns NCBITaxon ID species scientific name.  probably easier just looking via google search, ones used Allen Institute listed : https://github.com/AllenInstitute/GeneOrthology.","code":""},{"path":"/reference/getNCBITaxon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Determine the NCBITaxon ID for a species from the scientific name — getNCBITaxon","text":"","code":"getNCBITaxon(   species,   ncbitaxon_obo = NULL,   obo.file = \"ncbitaxon.obo\",   obo.url =     \"https://raw.githubusercontent.com/obophenotype/ncbitaxon/refs/heads/master/subsets/taxslim.obo\" )"},{"path":"/reference/getNCBITaxon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Determine the NCBITaxon ID for a species from the scientific name — getNCBITaxon","text":"species Scientific name one species. case sensitive, make sure spell correctly function return NA. ncbitaxon_obo Variable ontologyIndex format read obo.file file. obo.file Location look put ncbitaxon.obo file, ncbitaxon_obo provided obo.url URL download obo.file , already downloaded. recommend keeping default switching \"http://purl.obolibrary.org/obo/ncbitaxon.obo\" absolutely necessary.","code":""},{"path":"/reference/getNCBITaxon.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Determine the NCBITaxon ID for a species from the scientific name — getNCBITaxon","text":"AIT.anndata object updated/additional vector highly variable genes","code":""},{"path":"/reference/get_anndata_path.html","id":null,"dir":"Reference","previous_headings":"","what":"This function saves the AIT reference taxonomy to a temp folder as h5ad, if the provided file path is invalid. — get_anndata_path","title":"This function saves the AIT reference taxonomy to a temp folder as h5ad, if the provided file path is invalid. — get_anndata_path","text":"function saves AIT reference taxonomy temp folder h5ad, provided file path invalid.","code":""},{"path":"/reference/get_anndata_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function saves the AIT reference taxonomy to a temp folder as h5ad, if the provided file path is invalid. — get_anndata_path","text":"","code":"get_anndata_path(AIT_anndata, anndata_path, tmp_dir)"},{"path":"/reference/get_anndata_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function saves the AIT reference taxonomy to a temp folder as h5ad, if the provided file path is invalid. — get_anndata_path","text":"AIT_anndata AIT reference taxonomy object. anndata_path Local file path AIT reference taxonomy (h5ad file). tmp_dir Temporary directory writing temporary files (code clean ).","code":""},{"path":"/reference/get_anndata_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function saves the AIT reference taxonomy to a temp folder as h5ad, if the provided file path is invalid. — get_anndata_path","text":"Local file path AIT reference taxonomy h5ad file.","code":""},{"path":"/reference/get_cl_means.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cluster means for each row in a matrix — get_cl_means","title":"Compute cluster means for each row in a matrix — get_cl_means","text":"scrattch.hicat version function (scrattch.bigcat version crashes code).","code":""},{"path":"/reference/get_cl_means.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cluster means for each row in a matrix — get_cl_means","text":"","code":"get_cl_means(mat, cl)"},{"path":"/reference/get_cl_means.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cluster means for each row in a matrix — get_cl_means","text":"mat gene (rows) x samples (columns) sparse matrix cl cluster factor object","code":""},{"path":"/reference/get_cl_means.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cluster means for each row in a matrix — get_cl_means","text":"matrix genes (rows) x clusters (columns) means cluster","code":""},{"path":"/reference/get_cl_medians.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cluster medians for each row in a matrix — get_cl_medians","title":"Compute cluster medians for each row in a matrix — get_cl_medians","text":"Compute cluster medians row matrix","code":""},{"path":"/reference/get_cl_medians.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cluster medians for each row in a matrix — get_cl_medians","text":"","code":"get_cl_medians(mat, cl)"},{"path":"/reference/get_cl_medians.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cluster medians for each row in a matrix — get_cl_medians","text":"mat gene (rows) x samples (columns) sparse matrix cl cluster factor object","code":""},{"path":"/reference/get_cl_medians.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cluster medians for each row in a matrix — get_cl_medians","text":"matrix genes (rows) x clusters (columns) medians cluster","code":""},{"path":"/reference/get_cl_sums.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute cluster sums for each row in a matrix — get_cl_sums","title":"Compute cluster sums for each row in a matrix — get_cl_sums","text":"scrattch.hicat version function (scrattch.bigcat version crashes code).","code":""},{"path":"/reference/get_cl_sums.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute cluster sums for each row in a matrix — get_cl_sums","text":"","code":"get_cl_sums(mat, cl)"},{"path":"/reference/get_cl_sums.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute cluster sums for each row in a matrix — get_cl_sums","text":"mat gene (rows) x samples (columns) sparse matrix cl cluster factor object","code":""},{"path":"/reference/get_cl_sums.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute cluster sums for each row in a matrix — get_cl_sums","text":"matrix genes (rows) x clusters (columns) sums cluster","code":""},{"path":"/reference/get_os.html","id":null,"dir":"Reference","previous_headings":"","what":"Detect the operating system — get_os","title":"Detect the operating system — get_os","text":"function taken directly https://conjugateprior.org/2015/06/identifying--os--r/ credit goes Lowe \"conjugateprior\".","code":""},{"path":"/reference/get_os.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Detect the operating system — get_os","text":"","code":"get_os()"},{"path":"/reference/group_annotations.html","id":null,"dir":"Reference","previous_headings":"","what":"Group annotation columns — group_annotations","title":"Group annotation columns — group_annotations","text":"Group annotation columns","code":""},{"path":"/reference/group_annotations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group annotation columns — group_annotations","text":"","code":"group_annotations(df, sample_col = \"cell_id\", keep_order = TRUE)"},{"path":"/reference/group_annotations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group annotation columns — group_annotations","text":"df annotation dataframe arrange sample_col column unique sample ids. Default \"cell_id\". keep_order logical value. FALSE, sort annotations alphanumerically base.","code":""},{"path":"/reference/group_annotations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Group annotation columns — group_annotations","text":"annotation data frame reordered columns","code":""},{"path":"/reference/json_to_dend.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert json to R dendrogram — json_to_dend","title":"Convert json to R dendrogram — json_to_dend","text":"Convert json R dendrogram","code":""},{"path":"/reference/json_to_dend.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert json to R dendrogram — json_to_dend","text":"","code":"json_to_dend(json)"},{"path":"/reference/json_to_dend.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert json to R dendrogram — json_to_dend","text":"json json R dendrogram","code":""},{"path":"/reference/json_to_dend.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert json to R dendrogram — json_to_dend","text":"R dendrogram object","code":""},{"path":"/reference/loadTaxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in a reference data set in Allen taxonomy format — loadTaxonomy","title":"Read in a reference data set in Allen taxonomy format — loadTaxonomy","text":"Read reference data set Allen taxonomy format","code":""},{"path":"/reference/loadTaxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in a reference data set in Allen taxonomy format — loadTaxonomy","text":"","code":"loadTaxonomy(   taxonomyDir = getwd(),   anndata_file = \"AI_taxonomy.h5ad\",   log.file.path = getwd(),   force = FALSE )"},{"path":"/reference/loadTaxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in a reference data set in Allen taxonomy format — loadTaxonomy","text":"taxonomyDir Directory containing AIT file -- direct h5ad file name -- URL publicly accessible AIT file. anndata_file taxonomyDir directory, anndata_file must file name anndata object (.h5ad) loaded directory. taxonomyDir file name URL, anndata_file ignored. log.file.path Path write log file . Defaults current working directory.","code":""},{"path":"/reference/loadTaxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in a reference data set in Allen taxonomy format — loadTaxonomy","text":"Organized reference object ready mapping .","code":""},{"path":"/reference/log2CPM_byRow.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","text":"input can base R matrix sparse matrix Matrix package.","code":""},{"path":"/reference/log2CPM_byRow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","text":"","code":"log2CPM_byRow(counts, sf = NULL, denom = 1e+06, offset = 1)"},{"path":"/reference/log2CPM_byRow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","text":"counts matrix, dgCMatrix, dgTMatrix count values sf vector numeric values representing total number reads. count matrix includes genes, value calulated default (sf=NULL) accurate; however, count matrix represents small fraction genes, recommend also providing value. denom Denominator counts scaled . default (1 million) commonly used, 10000 also common sparser droplet-based sequencing methods. offset constant offset add cpm value prior taking log2 (default = 1)","code":""},{"path":"/reference/log2CPM_byRow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","text":"dgCMatrix log2(CPM + 1) values","code":""},{"path":"/reference/log2CPM_byRow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — log2CPM_byRow","text":"function expects columns correspond genes, rows samples default equivalent running logCPM cells..rows=TRUE (bit faster).  default offset 1, calculate just log2(counts per Million) set offset 0.","code":""},{"path":"/reference/logCPM.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","text":"input can base R matrix sparse matrix Matrix package.","code":""},{"path":"/reference/logCPM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","text":"","code":"logCPM(   counts,   offset = 1,   sf = NULL,   denom = 1e+06,   cells.as.rows = FALSE,   ... )"},{"path":"/reference/logCPM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","text":"counts matrix, dgCMatrix, dgTMatrix count values offset constant offset add cpm value prior taking log2 (default = 1) sf vector numeric values representing total number reads. count matrix includes genes, value calulated default (sf=NULL) accurate; however, count matrix represents small fraction genes, recommend also providing value. denom Denominator counts scaled . default (1 million) commonly used, 10000 also common sparser droplet-based sequencing methods. cells..rows Set FALSE (default) rows genes columns cells TRUE rows cells columns genes.","code":""},{"path":"/reference/logCPM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","text":"matrix, dgCMatrix, dgTMatrix log2(CPM + 1) values (matching input)","code":""},{"path":"/reference/logCPM.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a matrix of raw counts to a matrix of log2(Counts per Million + 1) values — logCPM","text":"function expects columns correspond samples, rows genes default, can also take transpose specified cells..rows=TRUE.  default offset 1, calculate just log2(counts per Million) set offset 0.","code":""},{"path":"/reference/mappingMode.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to set mapping mode — mappingMode","title":"Function to set mapping mode — mappingMode","text":"Function set mapping mode","code":""},{"path":"/reference/mappingMode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to set mapping mode — mappingMode","text":"","code":"mappingMode(AIT.anndata, mode)"},{"path":"/reference/mappingMode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to set mapping mode — mappingMode","text":"AIT.anndata vector cluster names reference taxonomy. mode Number cells keep per cluster.","code":""},{"path":"/reference/mappingMode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to set mapping mode — mappingMode","text":"AIT anndata mode set mapping","code":""},{"path":"/reference/revert_dend_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip extra annotation information from dendrogram — revert_dend_label","title":"Strip extra annotation information from dendrogram — revert_dend_label","text":"Strip extra annotation information dendrogram","code":""},{"path":"/reference/revert_dend_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip extra annotation information from dendrogram — revert_dend_label","text":"","code":"revert_dend_label(dend, value, attribute = \"label\")"},{"path":"/reference/revert_dend_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip extra annotation information from dendrogram — revert_dend_label","text":"dend R dendrogram object value Vector values pulled dendrogram attribute attribute overwritten","code":""},{"path":"/reference/revert_dend_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip extra annotation information from dendrogram — revert_dend_label","text":"R dendrogram object updated attributes","code":""},{"path":"/reference/run_precomp_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates the precomputed_stats.h5 file, which is an HDF5 file that contains a serialization of the cell type taxonomy tree, as well as statistics about the reference cells that have been assigned to the cell types in the taxonomy. — run_precomp_stats","title":"Generates the precomputed_stats.h5 file, which is an HDF5 file that contains a serialization of the cell type taxonomy tree, as well as statistics about the reference cells that have been assigned to the cell types in the taxonomy. — run_precomp_stats","text":"Generates precomputed_stats.h5 file, HDF5 file contains serialization cell type taxonomy tree, well statistics reference cells assigned cell types taxonomy.","code":""},{"path":"/reference/run_precomp_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates the precomputed_stats.h5 file, which is an HDF5 file that contains a serialization of the cell type taxonomy tree, as well as statistics about the reference cells that have been assigned to the cell types in the taxonomy. — run_precomp_stats","text":"","code":"run_precomp_stats(   anndata_path,   n_processors,   normalization,   tmp_dir,   hierarchy )"},{"path":"/reference/run_precomp_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates the precomputed_stats.h5 file, which is an HDF5 file that contains a serialization of the cell type taxonomy tree, as well as statistics about the reference cells that have been assigned to the cell types in the taxonomy. — run_precomp_stats","text":"anndata_path Local file path AIT reference taxonomy (h5ad file). n_processors Number independent worker processes spin . normalization Normalization h5ad files; must either 'raw' 'log2CPM'. tmp_dir Temporary directory writing hierarchical files (code clean ). hierarchy List term_set_labels reference taxonomy ordered gross fine.","code":""},{"path":"/reference/run_precomp_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates the precomputed_stats.h5 file, which is an HDF5 file that contains a serialization of the cell type taxonomy tree, as well as statistics about the reference cells that have been assigned to the cell types in the taxonomy. — run_precomp_stats","text":"File path precompute stats file.","code":""},{"path":"/reference/run_query_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates query_markers.json file. This is done by converting reference_markers.h5 file into the final JSON lookup table of marker genes. — run_query_markers","title":"Generates query_markers.json file. This is done by converting reference_markers.h5 file into the final JSON lookup table of marker genes. — run_query_markers","text":"Generates query_markers.json file. done converting reference_markers.h5 file final JSON lookup table marker genes.","code":""},{"path":"/reference/run_query_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates query_markers.json file. This is done by converting reference_markers.h5 file into the final JSON lookup table of marker genes. — run_query_markers","text":"","code":"run_query_markers(anndata_path, ref_markers_file_path, n_processors, tmp_dir)"},{"path":"/reference/run_query_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates query_markers.json file. This is done by converting reference_markers.h5 file into the final JSON lookup table of marker genes. — run_query_markers","text":"anndata_path Local file path AIT reference taxonomy (h5ad file). ref_markers_file_path Local file path generated reference_marker.h5 file. n_processors Number independent worker processes spin . tmp_dir Temporary directory writing hierarchical files (code clean ).","code":""},{"path":"/reference/run_query_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates query_markers.json file. This is done by converting reference_markers.h5 file into the final JSON lookup table of marker genes. — run_query_markers","text":"File path query markers file.","code":""},{"path":"/reference/run_reference_markers.html","id":null,"dir":"Reference","previous_headings":"","what":"Generates reference_marker.h5 file. The reference markers are, for every pair of leaf nodes in the cell type taxonomy tree, every gene that could conceivably be a marker gene for discriminating between those two cell types. — run_reference_markers","title":"Generates reference_marker.h5 file. The reference markers are, for every pair of leaf nodes in the cell type taxonomy tree, every gene that could conceivably be a marker gene for discriminating between those two cell types. — run_reference_markers","text":"Generates reference_marker.h5 file. reference markers , every pair leaf nodes cell type taxonomy tree, every gene conceivably marker gene discriminating two cell types.","code":""},{"path":"/reference/run_reference_markers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generates reference_marker.h5 file. The reference markers are, for every pair of leaf nodes in the cell type taxonomy tree, every gene that could conceivably be a marker gene for discriminating between those two cell types. — run_reference_markers","text":"","code":"run_reference_markers(precomp_stats_output_path, n_processors, tmp_dir)"},{"path":"/reference/run_reference_markers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generates reference_marker.h5 file. The reference markers are, for every pair of leaf nodes in the cell type taxonomy tree, every gene that could conceivably be a marker gene for discriminating between those two cell types. — run_reference_markers","text":"precomp_stats_output_path Local file path generated user provided precomputed_stats.h5 file. n_processors Number independent worker processes spin . tmp_dir Temporary directory writing hierarchical files (code clean ).","code":""},{"path":"/reference/run_reference_markers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generates reference_marker.h5 file. The reference markers are, for every pair of leaf nodes in the cell type taxonomy tree, every gene that could conceivably be a marker gene for discriminating between those two cell types. — run_reference_markers","text":"File path reference marker file.","code":""},{"path":"/reference/save_precomp_stats_to_uns.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves the contents of the precomputed_stats.h5 file to AIT -> uns -> hierarchical. — save_precomp_stats_to_uns","title":"Saves the contents of the precomputed_stats.h5 file to AIT -> uns -> hierarchical. — save_precomp_stats_to_uns","text":"Saves contents precomputed_stats.h5 file AIT -> uns -> hierarchical.","code":""},{"path":"/reference/save_precomp_stats_to_uns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves the contents of the precomputed_stats.h5 file to AIT -> uns -> hierarchical. — save_precomp_stats_to_uns","text":"","code":"save_precomp_stats_to_uns(anndata_path, precomp_stats_output_path, mode)"},{"path":"/reference/save_precomp_stats_to_uns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves the contents of the precomputed_stats.h5 file to AIT -> uns -> hierarchical. — save_precomp_stats_to_uns","text":"anndata_path Local file path AIT reference taxonomy (h5ad file). precomp_stats_output_path Local file path generated user provided precomputed_stats.h5 file. mode default, set existing mode, may necessary force mode standard","code":""},{"path":"/reference/save_precomp_stats_to_uns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves the contents of the precomputed_stats.h5 file to AIT -> uns -> hierarchical. — save_precomp_stats_to_uns","text":"AIT reference taxonomy precompute stats saved uns -> hierarchical.","code":""},{"path":"/reference/save_query_markers_to_uns.html","id":null,"dir":"Reference","previous_headings":"","what":"Saves the contents of the query_markers.json file to AIT -> uns -> hierarchical. — save_query_markers_to_uns","title":"Saves the contents of the query_markers.json file to AIT -> uns -> hierarchical. — save_query_markers_to_uns","text":"Saves contents query_markers.json file AIT -> uns -> hierarchical.","code":""},{"path":"/reference/save_query_markers_to_uns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Saves the contents of the query_markers.json file to AIT -> uns -> hierarchical. — save_query_markers_to_uns","text":"","code":"save_query_markers_to_uns(AIT_anndata, query_markers_output_path)"},{"path":"/reference/save_query_markers_to_uns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Saves the contents of the query_markers.json file to AIT -> uns -> hierarchical. — save_query_markers_to_uns","text":"AIT_anndata AIT reference taxonomy object file contents saved. query_markers_output_path Local file path generated user provided query_markers.json file.","code":""},{"path":"/reference/save_query_markers_to_uns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Saves the contents of the query_markers.json file to AIT -> uns -> hierarchical. — save_query_markers_to_uns","text":"AIT reference taxonomy query markers saved uns -> hierarchical.","code":""},{"path":"/reference/setLeadingString.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the default leading_string for file.path() — setLeadingString","title":"Sets the default leading_string for file.path() — setLeadingString","text":"Sets default leading_string file.path()","code":""},{"path":"/reference/setLeadingString.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the default leading_string for file.path() — setLeadingString","text":"","code":"setLeadingString(leading_string = NULL)"},{"path":"/reference/setLeadingString.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the default leading_string for file.path() — setLeadingString","text":"leading_string Default (NULL) sets \"\\\\\" Windows \"/\" otherwise; can provide character vector","code":""},{"path":"/reference/setLeadingString.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the default leading_string for file.path() — setLeadingString","text":"leading_string use default file.path().","code":""},{"path":"/reference/setPathSeparator.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the default path_separator for file.path() — setPathSeparator","title":"Sets the default path_separator for file.path() — setPathSeparator","text":"Sets default path_separator file.path()","code":""},{"path":"/reference/setPathSeparator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the default path_separator for file.path() — setPathSeparator","text":"","code":"setPathSeparator(path_separator = NULL)"},{"path":"/reference/setPathSeparator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the default path_separator for file.path() — setPathSeparator","text":"path_separator Default (NULL) sets .Platform$file.sep can provide character vector","code":""},{"path":"/reference/setPathSeparator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the default path_separator for file.path() — setPathSeparator","text":"path_separator use default file.path().","code":""},{"path":"/reference/subsampleCells.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to subsample cells — subsampleCells","title":"Function to subsample cells — subsampleCells","text":"Function subsample cells","code":""},{"path":"/reference/subsampleCells.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to subsample cells — subsampleCells","text":"","code":"subsampleCells(cluster.names, subSamp = 25, seed = 5, use.historical = FALSE)"},{"path":"/reference/subsampleCells.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to subsample cells — subsampleCells","text":"cluster.names vector cluster names reference taxonomy. subSamp Number cells keep per cluster. seed Random seed used subsampling. use.historical Defualt (FALSE) uses new, faster implementation. Set TRUE use historical, slower implementation back-compatibility.","code":""},{"path":"/reference/subsampleCells.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to subsample cells — subsampleCells","text":"Boolean vector cells keep (TRUE) cells remove (FALSE)","code":""},{"path":"/reference/subsample_taxonomy.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to subsample cells from a taxonomy — subsample_taxonomy","title":"Function to subsample cells from a taxonomy — subsample_taxonomy","text":"Function subsample cells taxonomy","code":""},{"path":"/reference/subsample_taxonomy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to subsample cells from a taxonomy — subsample_taxonomy","text":"","code":"subsample_taxonomy(cluster.names, cell_ids, dend = NULL, subsample = 2000)"},{"path":"/reference/subsample_taxonomy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to subsample cells from a taxonomy — subsample_taxonomy","text":"cluster.names vector cell type names cell_ids vector cell ids subsample dend dendrogram object use subsampling subsample number cells retain per cluster (default = 2000)","code":""},{"path":"/reference/subsample_taxonomy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to subsample cells from a taxonomy — subsample_taxonomy","text":"boolean vector subsampling","code":""},{"path":"/reference/top_binary_genes.html","id":null,"dir":"Reference","previous_headings":"","what":"Get top genes by beta (binary) score — top_binary_genes","title":"Get top genes by beta (binary) score — top_binary_genes","text":"Get top genes beta (binary) score","code":""},{"path":"/reference/top_binary_genes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get top genes by beta (binary) score — top_binary_genes","text":"","code":"top_binary_genes(data, cluster.names, gene.count = 2000)"},{"path":"/reference/top_binary_genes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get top genes by beta (binary) score — top_binary_genes","text":"data count (CPM logCPM) matrix cluster.names vector cluster names reference taxonomy. gene.count number top genes return (Default=2000)","code":""},{"path":"/reference/top_binary_genes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get top genes by beta (binary) score — top_binary_genes","text":"Boolean vector cells keep (TRUE) cells remove (FALSE)","code":""},{"path":"/reference/tosentence.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to sentence case — tosentence","title":"Convert to sentence case — tosentence","text":"Convert sentence case","code":""},{"path":"/reference/tosentence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to sentence case — tosentence","text":"","code":"tosentence(str)"},{"path":"/reference/tosentence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to sentence case — tosentence","text":"str character string","code":""},{"path":"/reference/tosentence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert to sentence case — tosentence","text":"character string sentence case","code":""},{"path":"/reference/updateHighlyVariableGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add or update highly variable genes for the current mode — updateHighlyVariableGenes","title":"Function to add or update highly variable genes for the current mode — updateHighlyVariableGenes","text":"Function add update highly variable genes current mode","code":""},{"path":"/reference/updateHighlyVariableGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add or update highly variable genes for the current mode — updateHighlyVariableGenes","text":"","code":"updateHighlyVariableGenes(   AIT.anndata,   variable.genes = NULL,   mode = AIT.anndata$uns$mode,   list.name = paste0(\"highly_variable_genes_\", AIT.anndata$uns$mode),   default.list.name = \"highly_variable_genes_standard\" )"},{"path":"/reference/updateHighlyVariableGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add or update highly variable genes for the current mode — updateHighlyVariableGenes","text":"AIT.anndata reference taxonomy anndata object. variable.genes Set variable genes add list.name slot obs. Can provided logical character vector. list.name slot obs highly variable genes go?  Default highly_variable_genes_mode default.list.name slot highly variable genes copied none provided? Default highly_variable_genes_standard","code":""},{"path":"/reference/updateHighlyVariableGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to add or update highly variable genes for the current mode — updateHighlyVariableGenes","text":"AIT.anndata object updated/additional vector highly variable genes","code":""},{"path":"/reference/updateMarkerGenes.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add or update marker genes for the current mode — updateMarkerGenes","title":"Function to add or update marker genes for the current mode — updateMarkerGenes","text":"Function add update marker genes current mode","code":""},{"path":"/reference/updateMarkerGenes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add or update marker genes for the current mode — updateMarkerGenes","text":"","code":"updateMarkerGenes(   AIT.anndata,   marker.genes = NULL,   list.name = paste0(\"marker_genes_\", AIT.anndata$uns$mode),   default.list.name = \"marker_genes_standard\" )"},{"path":"/reference/updateMarkerGenes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add or update marker genes for the current mode — updateMarkerGenes","text":"AIT.anndata reference taxonomy anndata object. list.name slot obs highly variable genes go?  Default marker_genes_mode default.list.name slot highly variable genes copied none provided? Default marker_genes_standard variable.genes Set variable genes add list.name slot obs.","code":""},{"path":"/reference/updateMarkerGenes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to add or update marker genes for the current mode — updateMarkerGenes","text":"AIT.anndata object updated/additional vector marker genes Note wrapper updateHighlyVariableGenes different default names","code":""},{"path":"/reference/updateTaxonomyMetadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Updates a metadata data frame to better align with the AIT schema — updateTaxonomyMetadata","title":"Updates a metadata data frame to better align with the AIT schema — updateTaxonomyMetadata","text":"function defaults standardizing metadata messing ontologies. computeOntologyTerms wrapper function defaults compute ontology terms everything (except CL), anything else.  Either function can used identically adjusting parameters. breaking issues cause function return FALSE.  potential issues still return TRUE output warning stderr.  messages get returned log file.","code":""},{"path":"/reference/updateTaxonomyMetadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Updates a metadata data frame to better align with the AIT schema — updateTaxonomyMetadata","text":"","code":"updateTaxonomyMetadata(   metadata,   log.file.path = getwd(),   log.file.name = \"updateTaxonomyMetadata_log.txt\",   standardize.metadata = TRUE,   compute.ontology.terms = NULL,   compute.brain.atlas.terms = NULL,   convert.regions.to.names = FALSE,   compute.cl.terms = NULL,   print.messages = FALSE )"},{"path":"/reference/updateTaxonomyMetadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Updates a metadata data frame to better align with the AIT schema — updateTaxonomyMetadata","text":"metadata metadata table (data.frame) included obs slot AIT file follow AIT schema log.file.path directory output logfile errors warnings (; default getwd()) standardize.metadata TRUE (default) clean standard schema files try remove common errors (e.g., differences case, trailing spaces, etc.), converting factors. compute.ontology.terms vector following terms: \"ontology_term_id\" \"organism\", \"anatomical_region\", \"self_reported_sex\", \"self_reported_ethnicity\", \"assay\", \"disease\". default (NULL) terms computed. terms included, look column name return best fit ontology ids new column \"ontology_term_id\" appended. compute.brain.atlas.terms Default (NULL) skips step. provided, can one : DHBA (developing human brain atlas), HBA (human brain atlas), MBA (mouse brain atlas), correspond ontologies name https://github.com/brain-bican. convert.regions..names full brain region names provided \"anatomical_region\", nothing. Otherwise, updateTaxonomyMetadata attempt convert brain region abbreviations brain region names, required convert UBERON brain atlas ontologies. TRUE, brain region names overwrite inputted brain region abbrevations \"anatomical_region\"; otherwise returned list entries brain region-related ontology terms (default). Note variable requires value compute.brain.atlas.terms (NULL), ontology use try convert abbreviation name. compute.cl.terms Default (NULL) skips step strongly recommended.  column name provided (e.g., \"subclass\") attempt find nearest CL term whatever included column. provide reasonable results column includes human readable names similar names found cell ontology. print.messages Print messages log file (FALSE; default) also screen (TRUE)","code":""},{"path":"/reference/updateTaxonomyMetadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Updates a metadata data frame to better align with the AIT schema — updateTaxonomyMetadata","text":"list \"metadata\" updated metadata file addition list entries corresponding additional columns statistics around conversions performed compute.ontology.terms, ","code":""}]
